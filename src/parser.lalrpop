use std::iter::FromIterator;

use lexer;
use ast;

grammar;

pub Program: ast::Program = {
    <lines:Line*> => ast::Program {
        statements: Vec::from_iter(lines.into_iter().flatten())
    },
};

Line: ast::Suite = {
    Statement,
    "\n" => vec![],
};

Statement: ast::Suite = {
    AssignStatement,
    PassStatement,
};

AssignStatement: ast::Suite = {
    <ident: Identifier> "=" <expr: Expression> => vec![
        ast::Statement::Assign { ident: ident, expr: expr, },
    ],
};

PassStatement: ast::Suite = {
    "pass" => vec![ast::Statement::Pass],
};

Operator: ast::Operator = {
    "=" => ast::Operator::Equals,
    "+" => ast::Operator::Plus,
    "-" => ast::Operator::Minus,
    "*" => ast::Operator::Multiply,
    "/" => ast::Operator::Divide,
};

Expression: ast::Expression = {
    ConditionalExpression,
};

ConditionalExpression: ast::Expression = {
    OrTest,
};

OrTest: ast::Expression = {
    AndTest,
};

AndTest: ast::Expression = {
    NotTest,
};

NotTest: ast::Expression = {
    Comparison,
};

Comparison: ast::Expression = {
    OrExpr,
};

OrExpr: ast::Expression = {
    XorExpr,
};

XorExpr: ast::Expression = {
    AndExpr,
};

AndExpr: ast::Expression = {
    ShiftExpr,
};

ShiftExpr: ast::Expression = {
    ArithmeticExpr,
};

ArithmeticExpr: ast::Expression = {
    MultExpr,
};

MultExpr: ast::Expression = {
    UnaryExpr,
};

UnaryExpr: ast::Expression = {
    PowerExpr,
};

PowerExpr: ast::Expression = {
    Primary,
};

Primary: ast::Expression = {
    Atom,
};

Atom: ast::Expression = {
    <ident: Identifier> => ast::Expression::Identifier { name: ident },
};

Identifier: ast::Identifier = {
    <ident: "identifier"> => ast::Identifier::Name { name: ident },
};

Number: ast::Number = {
    <i: "integer"> => ast::Number::Integer { value: i },
};

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Tok {
        "identifier" => lexer::Tok::Identifier { name: <String> },
        "pass" => lexer::Tok::Pass,
        "=" => lexer::Tok::Equals,
        "+" => lexer::Tok::Plus,
        "-" => lexer::Tok::Minus,
        "*" => lexer::Tok::Multiply,
        "/" => lexer::Tok::Divide,
        "integer" => lexer::Tok::Integer { value: <u32> },
        "lpar" => lexer::Tok::LPar,
        "rpar" => lexer::Tok::RPar,
        "\n" => lexer::Tok::Newline,
    }
}

// vim: ft=rust
