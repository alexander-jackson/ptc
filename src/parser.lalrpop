use std::iter::FromIterator;

use lexer;
use ast;

grammar;

pub Program: ast::Program = {
    <lines:Line*> => ast::Program::new(
        Vec::from_iter(lines.into_iter().flatten())
    ),
};

Line: ast::Suite = {
    Statement,
    "\n" => vec![],
};

Suite: ast::Suite = {
    "\n" "indent" <s: Line+> "unindent" =>
        s.into_iter().flatten().collect(),
    <s: StatementList> "\n" => s,
};

Statement: ast::Suite = {
    StatementList,
    <comp: CompoundStatement> => vec![comp],
};

StatementList: ast::Suite = {
    <s1: SmallStatement> <s2: (";" SmallStatement)*> ";"? "\n" => {
        let mut statements = vec![s1];
        statements.extend(s2.into_iter().map(|e| e.1));
        statements
    }
};

SmallStatement: ast::Statement = {
    AssignStatement,
    AugmentedAssignStatement,
    ExpressionStatement,
    PassStatement,
    DeleteStatement,
    ReturnStatement,
    GlobalStatement,
};

CompoundStatement: ast::Statement = {
    IfStatement,
    WhileStatement,
    FunctionDeclStatement,
};

AssignStatement: ast::Statement = {
    <target: Identifier> "=" <expr: Expression> =>
        ast::Statement::Assign { target: ast::Expression::Identifier { name: target }, expr: expr, },
    <target: TypedIdentifier> "=" <expr: Expression> =>
        ast::Statement::Assign { target: ast::Expression::Identifier { name: target }, expr: expr, },
    <target: Subscription> "=" <expr: Expression> =>
        ast::Statement::Assign { target: target, expr: expr },
};

AugmentedAssignOperator: ast::Operator = {
    "+=" => ast::Operator::PlusEquals,
    "-=" => ast::Operator::MinusEquals,
    "*=" => ast::Operator::MultiplyEquals,
    "/=" => ast::Operator::DivideEquals,
    "%=" => ast::Operator::ModuloEquals,
};

AugmentedAssignStatement: ast::Statement = {
    <target: Identifier> <op: AugmentedAssignOperator> <expr: Expression> =>
        ast::Statement::AugmentedAssign { target: ast::Expression::Identifier { name: target }, op: op, expr: expr },
    <target: Subscription> <op: AugmentedAssignOperator> <expr: Expression> =>
        ast::Statement::AugmentedAssign { target: target, op: op, expr: expr },
};

ExpressionStatement: ast::Statement = {
    <expr: Expression> =>
        ast::Statement::Expression { expr: expr, },
};

PassStatement: ast::Statement = {
    "pass" => ast::Statement::Pass,
};

DeleteStatement: ast::Statement = {
    "del" <head: Identifier> <tail: ("," Identifier)*> => {
        let mut idents = vec![head];
        idents.extend(tail.into_iter().map(|e| e.1));
        ast::Statement::DeleteStatement { targets: idents }
    }
};

ReturnStatement: ast::Statement = {
    "return" <expr: Expression?> =>
        ast::Statement::ReturnStatement { expr: expr },
};

GlobalStatement: ast::Statement = {
    "global" <ident: Identifier> =>
        ast::Statement::GlobalStatement { ident: ident },
};

IfStatement: ast::Statement = {
    "if" <expr: Expression> ":" <suite: Suite> <optional: ("else" ":" Suite)?> =>
        ast::Statement::IfStatement {
            expr: expr,
            suite: suite,
            optional: optional.map(|o| o.2),
        },
};

WhileStatement: ast::Statement = {
    "while" <expr: Expression> ":" <suite: Suite> =>
        ast::Statement::WhileStatement {
            expr: expr,
            suite: suite,
        },
};

ArgumentList: Vec<ast::Identifier> = {
    <l: (<OptionallyTyped> ",")*> <e: OptionallyTyped> => {
        let mut l = l;
        l.push(e);
        l
    },
};

FunctionDeclStatement: ast::Statement = {
    "def" <ident: Identifier> "(" <args: ArgumentList?> ")" <hint: ("->" CompoundTypehint)?>":" <body: Suite>  =>
        ast::Statement::FunctionDecl {
            name: ident,
            args: args,
            body: body,
            ret: hint.map(|x| x.1),
        },
};

Operator: ast::Operator = {
    "+" => ast::Operator::Plus,
    "-" => ast::Operator::Minus,
    "*" => ast::Operator::Multiply,
    "/" => ast::Operator::Divide,
};

Expression: ast::Expression = {
    ConditionalExpression,
};

ConditionalExpression: ast::Expression = {
    OrTest,
};

OrTest: ast::Expression = {
    AndTest,
    <left: OrTest> "or" <right: AndTest> =>
        ast::Expression::BinaryOperation {
            left: Box::new(left),
            op: ast::Operator::LogicalOr,
            right: Box::new(right)
        },
};

AndTest: ast::Expression = {
    NotTest,
    <left: AndTest> "and" <right: NotTest> =>
        ast::Expression::BinaryOperation {
            left: Box::new(left),
            op: ast::Operator::LogicalAnd,
            right: Box::new(right)
        },
};

NotTest: ast::Expression = {
    Comparison,
    "not" <expr: NotTest> =>
        ast::Expression::UnaryOperation {
            op: ast::Operator::LogicalNot,
            expr: Box::new(expr),
        },
};

ComparisonOperator: ast::Operator = {
    "<" => ast::Operator::Less,
    ">" => ast::Operator::Greater,
    "<=" => ast::Operator::LessOrEqual,
    ">=" => ast::Operator::GreaterOrEqual,
    "==" => ast::Operator::Equal,
    "!=" => ast::Operator::NotEqual,
};

Comparison: ast::Expression = {
    OrExpr,
    <left: Comparison> <op: ComparisonOperator> <right: OrExpr> =>
        ast::Expression::BinaryOperation {
            left: Box::new(left),
            op: op,
            right: Box::new(right),
        },
};

OrExpr: ast::Expression = {
    XorExpr,
};

XorExpr: ast::Expression = {
    AndExpr,
};

AndExpr: ast::Expression = {
    ShiftExpr,
};

ShiftExpr: ast::Expression = {
    ArithmeticExpr,
};

ArithmeticOperator: ast::Operator = {
    "+" => ast::Operator::Plus,
    "-" => ast::Operator::Minus,
};

ArithmeticExpr: ast::Expression = {
    MultExpr,
    <left: ArithmeticExpr> <op: ArithmeticOperator> <right: MultExpr> =>
        ast::Expression::BinaryOperation {
            left: Box::new(left),
            op: op,
            right: Box::new(right),
        },
};

MultOperator: ast::Operator = {
    "*" => ast::Operator::Multiply,
    "/" => ast::Operator::Divide,
    "%" => ast::Operator::Modulo,
};

MultExpr: ast::Expression = {
    UnaryExpr,
    <left: MultExpr> <op: MultOperator> <right: UnaryExpr> =>
        ast::Expression::BinaryOperation {
            left: Box::new(left),
            op: op,
            right: Box::new(right),
        },
};

UnaryOperator: ast::Operator = {
    "+" => ast::Operator::Plus,
    "-" => ast::Operator::Minus,
};

UnaryExpr: ast::Expression = {
    PowerExpr,
    <op: UnaryOperator> <e: UnaryExpr> =>
        ast::Expression::UnaryOperation {
            op: op,
            expr: Box::new(e),
        },
};

PowerExpr: ast::Expression = {
    Primary,
};

Primary: ast::Expression = {
    Atom,
    AttributeRef,
    Subscription,
    Call,
};

Atom: ast::Expression = {
    <ident: Identifier> => ast::Expression::Identifier { name: ident },
    <literal: Literal> => ast::Expression::Literal { value: literal },
    Enclosure,
};

AttributeRef: ast::Expression = {
    <primary: Primary> "." <attribute: Identifier> => ast::Expression::AttributeRef {
        primary: Box::new(primary),
        attribute: attribute,
    }
};

Subscription: ast::Expression = {
    <primary: Primary> "[" <expr: Expression> "]" => {
        ast::Expression::Subscription {
            primary: Box::new(primary),
            expr: Box::new(expr),
        }
    },
};

Call: ast::Expression = {
    <primary: Primary> "(" <args: CallArgs?> ")" =>
        ast::Expression::FunctionCall {
            name: Box::new(primary),
            args: args,
        },
};

CallArgs: Vec<ast::Expression> = {
    <l: (<Expression> ",")*> <e: Expression> => {
        let mut l = l;
        l.push(e);
        l
    },
};

Identifier: ast::Identifier = {
    <ident: "identifier"> => ast::Identifier::Name { name: ident },
};

TypedIdentifier: ast::Identifier = {
    <ident: "identifier"> ":" <typehint: CompoundTypehint> => {
        ast::Identifier::Typed { name: ident, typehint: typehint }
    }
};

OptionallyTyped: ast::Identifier = {
    Identifier,
    TypedIdentifier,
};

CompoundTypehint: String = {
    <typehint: "identifier"> => typehint,
    <compound: "identifier"> "[" <inner: CompoundTypehint> "]" => {
        format!("{}[{}]", compound, inner)
    },
};

Literal: ast::Literal = {
    <i: "integer"> => ast::Literal::Integer { value: i },
    <f: "float"> => ast::Literal::Float { value: f },
};

Enclosure: ast::Expression = {
    ParenthForm,
    ListDisplay,
};

ParenthForm: ast::Expression = {
    "(" <expr: Expression> ")" =>
        ast::Expression::ParenExpression { expr: Box::new(expr) },
};

ListDisplay: ast::Expression = {
    "[" "]" => ast::Expression::ListDisplay,
};

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Tok {
        "indent" => lexer::Tok::Indent,
        "unindent" => lexer::Tok::Unindent,
        "identifier" => lexer::Tok::Identifier { name: <String> },
        "pass" => lexer::Tok::Pass,
        "if" => lexer::Tok::If,
        "else" => lexer::Tok::Else,
        "while" => lexer::Tok::While,
        "def" => lexer::Tok::Def,
        "return" => lexer::Tok::Return,
        "global" => lexer::Tok::Global,
        "del" => lexer::Tok::Del,
        "or" => lexer::Tok::LogicalOr,
        "and" => lexer::Tok::LogicalAnd,
        "not" => lexer::Tok::LogicalNot,
        "=" => lexer::Tok::Assign,
        "+" => lexer::Tok::Plus,
        "-" => lexer::Tok::Minus,
        "*" => lexer::Tok::Multiply,
        "/" => lexer::Tok::Divide,
        "%" => lexer::Tok::Modulo,
        "+=" => lexer::Tok::PlusEquals,
        "-=" => lexer::Tok::MinusEquals,
        "*=" => lexer::Tok::MultiplyEquals,
        "/=" => lexer::Tok::DivideEquals,
        "%=" => lexer::Tok::ModuloEquals,
        "<" => lexer::Tok::Less,
        ">" => lexer::Tok::Greater,
        "<=" => lexer::Tok::LessOrEqual,
        ">=" => lexer::Tok::GreaterOrEqual,
        "==" => lexer::Tok::Equal,
        "!=" => lexer::Tok::NotEqual,
        "integer" => lexer::Tok::Integer { value: <u32> },
        "float" => lexer::Tok::Float { value: <f32> },
        "(" => lexer::Tok::LPar,
        ")" => lexer::Tok::RPar,
        "[" => lexer::Tok::LSquare,
        "]" => lexer::Tok::RSquare,
        ":" => lexer::Tok::Colon,
        ";" => lexer::Tok::Semicolon,
        "," => lexer::Tok::Comma,
        "." => lexer::Tok::Dot,
        "->" => lexer::Tok::Arrow,
        "\n" => lexer::Tok::Newline,
    }
}

// vim: ft=rust
