use std::iter::FromIterator;

use lexer;
use ast;

grammar;

Lines<T>: Vec<T> = {
    <v:(<T> "\n"+)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Program: ast::Program = {
    <lines:Line*> => ast::Program {
        statements: Vec::from_iter(lines.into_iter().flatten())
    },
};

Line: ast::Suite = {
    Statement,
    "\n" => vec![],
};

Statement: ast::Suite = {
    <ident: Identifier> "=" <expr: Expression> => vec![
        ast::Statement::Assign {
            ident: ident,
            expr: expr,
        }
    ],
};

Identifier: ast::Identifier = {
    <ident: "identifier"> => ast::Identifier::Name { name: ident },
};

Operator: ast::Operator = {
    "=" => ast::Operator::Equals,
    "+" => ast::Operator::Plus,
    "-" => ast::Operator::Minus,
    "*" => ast::Operator::Multiply,
    "/" => ast::Operator::Divide,
};

Expression: ast::Expression = {
    <left: Expression> <op: Operator> <right: Number> =>
        ast::Expression::BinaryOperation {
            left: Box::new(left),
            op: op,
            right: Box::new(right),
        },
    "lpar" <expr: Expression> "rpar" =>
        ast::Expression::ParenExpr { expr: Box::new(expr) },
    <ident: "identifier"> => ast::Expression::Identifier {
        name: ast::Identifier::Name { name: ident },
    },
    <num: Number> => ast::Expression::Literal {
        value: num,
    },
};

Number: ast::Number = {
    <i: "integer"> => ast::Number::Integer { value: i },
};

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Tok {
        "identifier" => lexer::Tok::Identifier { name: <String> },
        "=" => lexer::Tok::Equals,
        "+" => lexer::Tok::Plus,
        "-" => lexer::Tok::Minus,
        "*" => lexer::Tok::Multiply,
        "/" => lexer::Tok::Divide,
        "integer" => lexer::Tok::Integer { value: <u32> },
        "lpar" => lexer::Tok::LPar,
        "rpar" => lexer::Tok::RPar,
        "\n" => lexer::Tok::Newline,
    }
}

// vim: ft=rust
