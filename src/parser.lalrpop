use lexer;
use ast;

grammar<'input>;

Semi<T>: Vec<T> = {
    <v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Program: ast::Program<'input> = {
    <stmts: Semi<Statement>> => ast::Program { stmts },
};

Statement: ast::Stmt<'input> = {
    Identifier Operator Expression => ast::Stmt::Statement(<>),
};

Identifier: ast::Identifier<'input> = {
    "identifier" => ast::identifier(<>),
};

Operator: ast::Operator = {
    "=" => ast::Operator::Assign,
    "+" => ast::Operator::Plus,
    "-" => ast::Operator::Minus,
    "*" => ast::Operator::Multiply,
    "/" => ast::Operator::Divide,
};

Expression: ast::Expression = {
    <left: Expression> <op: Operator> <right: Number> =>
        ast::Expression::BinaryOperation {
            left: Box::new(left),
            op: op,
            right: Box::new(right),
        },
    "lpar" <expr: Expression> "rpar" =>
        ast::Expression::ParenExpr { expr: Box::new(expr) },
    <num: Number> => ast::Expression::Literal {
        value: num,
    },
};

Number: ast::Number = {
    "integer" => ast::number(<>),
};

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Tok<'input> {
        "identifier" => lexer::Tok::Identifier { name: <&'input str> },
        "=" => lexer::Tok::Assign,
        "+" => lexer::Tok::Plus,
        "-" => lexer::Tok::Minus,
        "*" => lexer::Tok::Multiply,
        "/" => lexer::Tok::Divide,
        "integer" => lexer::Tok::Integer { value: <u32> },
        "lpar" => lexer::Tok::LPar,
        "rpar" => lexer::Tok::RPar,
        ";" => lexer::Tok::SemiColon,
    }
}

// vim: ft=rust
